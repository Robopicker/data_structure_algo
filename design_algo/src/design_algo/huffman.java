package design_algo;
import java.util.*;

class huffmanNode
{   int data; 
	char c;
	huffmanNode left;
	huffmanNode right;
	
}
	class MyComparator implements Comparator<huffmanNode>{
		
	public int compare(huffmanNode x,huffmanNode y)	{
		
		return x.data-y.data;
	}	
}


public class huffman {

	public static void printCode(huffmanNode root, String s) 
    { 
  
        // base case; if the left and right are null 
        // then its a leaf node and we print 
        // the code s generated by traversing the tree. 
        if (root.left 
                == null
            && root.right 
                   == null
            && Character.isLetter(root.c)) { 
  
            // c is the character in the node 
            System.out.println(root.c + ":" + s); 
  
            return; 
        } 
  
        // if we go to left then add "0" to the code. 
        // if we go to the right add"1" to the code. 
  
        // recursive calls for left and 
        // right sub-tree of the generated tree. 
        printCode(root.left, s + "0"); 
        printCode(root.right, s + "1"); 
    } 
	
	
	public static void main(String[] args) {
		
		char input[]= {'a','b','c','d','e','f'};
		int freq[]= {5,9,12,13,16,45};
		
		PriorityQueue<huffmanNode> q=new PriorityQueue<huffmanNode>(6,new MyComparator() );
		
		for(int i=0;i<6;i++)
		{
			huffmanNode hf=new huffmanNode();
			hf.c=input[i];
			hf.data=freq[i];
			hf.left=null;
			hf.right=null;
			q.add(hf);
		}
		huffmanNode root=null;
		while(q.size()>1)
		{
		huffmanNode hf1=q.peek();
		 q.poll();
		 huffmanNode hf2=q.peek();
		 q.poll();
		 huffmanNode new1=new huffmanNode();
		 new1.data=hf1.data+hf2.data;
		 new1.c='-';
		 
		 new1.left=hf1;
		 new1.right=hf2;
		 root=new1;
		 q.add(new1);
			
		}
		
		printCode(root,"");
	}

}
